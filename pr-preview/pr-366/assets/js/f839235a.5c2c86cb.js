"use strict";(self.webpackChunkeffective_shell=self.webpackChunkeffective_shell||[]).push([[5472],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),c=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),f=r,u=h["".concat(o,".").concat(f)]||h[f]||m[f]||a;return n?i.createElement(u,s(s({ref:t},p),{},{components:n})):i.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[h]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={title:"Shell Snippets",slug:"/shell-snippets/"},s=void 0,l={unversionedId:"shell-snippets/index",id:"shell-snippets/index",title:"Shell Snippets",description:"After finishing the Effective Shell Book I still find myself regularly discovering techniques that are huge time-savers. I've called these Effective Shell Snippets and will update this page with them from time to time, so check back regularly!",source:"@site/docs/07-shell-snippets/00-index.md",sourceDirName:"07-shell-snippets",slug:"/shell-snippets/",permalink:"/shell-snippets/",draft:!1,editUrl:"https://github.com/dwmkerr/effective-shell/edit/main/docs/07-shell-snippets/00-index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Shell Snippets",slug:"/shell-snippets/"},sidebar:"sidebar",previous:{title:"Master the Multiplexer",permalink:"/part-6-advanced-techniques/master-the-multiplexer/"}},o={},c=[{value:"Git + AI: Interactively Staging Changes, Summarising with AI",id:"git--ai-interactively-staging-changes-summarising-with-ai",level:3}],p={toc:c};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"After finishing the ",(0,r.kt)("a",{parentName:"p",href:"https://amzn.to/4ho0F91"},"Effective Shell Book")," I still find myself regularly discovering techniques that are huge time-savers. I've called these ",(0,r.kt)("strong",{parentName:"p"},"Effective Shell Snippets")," and will update this page with them from time to time, so check back regularly!"),(0,r.kt)("h3",{id:"git--ai-interactively-staging-changes-summarising-with-ai"},"Git + AI: Interactively Staging Changes, Summarising with AI"),(0,r.kt)("p",null,"A fun snippet I built is the function ",(0,r.kt)("inlineCode",{parentName:"p"},"aigac"),' - this is short for "AI Git Add & Commit". It performs an interactive patch add of changes to the working tree, commits the changes, then uses the ',(0,r.kt)("a",{parentName:"p",href:"https://github.com/dwmkerr/terminal-ai"},"Terminal AI")," tool to create a commit message with a title and description that follows ",(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"conventional commit")," syntax:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Demo",src:n(5416).Z,width:"840",height:"386"})),(0,r.kt)("p",null,"The function looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"aigac() {\n  # Add untracked files but none of their content - so that 'git add --patch'\n  # lets us interactively stage new files as well as existing file changes.\n  git add -N .\n  git add --patch\n\n  # If there's no changes, bail.\n  if git diff --cached --quiet; then\n    echo \"No changes staged for commit.\"\n    return 1\n  fi\n\n  # Generate the commit message using terminal-ai. Pipe it into 'git commit'\n  # by using the '-F -' (i.e. read from the stdin file). Make sure we edit it\n  # in the editor first with '-e'.\n  git diff --cached |\\\n    ai -- 'summarise this git diff into a conventional commit, e.g. feat(feature): short description\\n\\nlong description' |\\\n    git commit -e -F - \n}\n")),(0,r.kt)("p",null,"This snippet may change over time - you should be able to find the latest version in my ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dwmkerr/dotfiles"},(0,r.kt)("inlineCode",{parentName:"a"},"dotfiles")),"."))}h.isMDXComponent=!0},5416:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/aigac-40453b4eed9c6bcf8ca96529c07cf097.svg"}}]);