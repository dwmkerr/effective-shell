"use strict";(self.webpackChunkeffective_shell=self.webpackChunkeffective_shell||[]).push([[9682],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=p(n),d=i,u=h["".concat(s,".").concat(d)]||h[d]||m[d]||r;return n?a.createElement(u,l(l({ref:t},c),{},{components:n})):a.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"Slice and Dice Text",slug:"/part-3-manipulating-text/slice-and-dice-text/"},l=void 0,o={unversionedId:"manipulating-text/slice-and-dice-text/index",id:"manipulating-text/slice-and-dice-text/index",title:"Slice and Dice Text",description:"In Chapter 14 we looked at how to use the grep command to search through text and filter text. In this chapter we're going to look at some of the basic commands which we can use to manipulate text. There are a whole raft of commands and options available.",source:"@site/docs/03-manipulating-text/15-slice-and-dice-text/index.md",sourceDirName:"03-manipulating-text/15-slice-and-dice-text",slug:"/part-3-manipulating-text/slice-and-dice-text/",permalink:"/part-3-manipulating-text/slice-and-dice-text/",draft:!1,editUrl:"https://github.com/dwmkerr/effective-shell/edit/main/docs/03-manipulating-text/15-slice-and-dice-text/index.md",tags:[],version:"current",frontMatter:{title:"Slice and Dice Text",slug:"/part-3-manipulating-text/slice-and-dice-text/"},sidebar:"sidebar",previous:{title:"Get to Grips with Grep",permalink:"/part-3-manipulating-text/get-to-grips-with-grep/"},next:{title:"Advanced Text Manipulation",permalink:"/part-3-manipulating-text/advanced-text-manipulation/"}},s={},p=[{value:"Heads and Tails",id:"heads-and-tails",level:2},{value:"Replacing Text",id:"replacing-text",level:2},{value:"How to Cut",id:"how-to-cut",level:2},{value:"A Trick with Rev",id:"a-trick-with-rev",level:2},{value:"Sort and Unique",id:"sort-and-unique",level:2},{value:"Don&#39;t Forget Your Pager!",id:"dont-forget-your-pager",level:2},{value:"Summary",id:"summary",level:2}],c={toc:p};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"../../part-3-manipulating-text/get-to-grips-with-grep"},"Chapter 14")," we looked at how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"grep")," command to search through text and filter text. In this chapter we're going to look at some of the basic commands which we can use to ",(0,i.kt)("em",{parentName:"p"},"manipulate")," text. There are a whole raft of commands and options available."),(0,i.kt)("p",null,"We'll start with the basics and move onto some of the more sophisticated commands in the next chapter."),(0,i.kt)("h2",{id:"heads-and-tails"},"Heads and Tails"),(0,i.kt)("p",null,"The commands ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," are very simple but incredibly useful."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"head")," is used to extract part of the ",(0,i.kt)("em",{parentName:"p"},"top")," of a file and ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," is used to extract part of the ",(0,i.kt)("em",{parentName:"p"},"end")," of a file. Once you starting using these commands you'll find yourself using them regularly."),(0,i.kt)("p",null,"Let's start with ",(0,i.kt)("inlineCode",{parentName:"p"},"head"),". Imagine we have a data file which has been sent to us, we don't know exactly what is in it, but we know it is large. How can we take a quick look?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ head ~/effective-shell/data/top100.csv\n\n"Rank","Rating","Title","Reviews"\n"1","97","Black Panther (2018)","515"\n"2","94","Avengers: Endgame (2019)","531"\n"3","93","Us (2019)","536"\n"4","97","Toy Story 4 (2019)","445"\n"5","99","Lady Bird (2017)","393"\n"6","100","Citizen Kane (1941)","94"\n"7","97","Mission: Impossible - Fallout (2018)","430"\n"8","98","The Wizard of Oz (1939)","120"\n"9","96","The Irishman (2019)","441"\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," command just shows the first ten lines of a file. Here we can see that this is a ",(0,i.kt)("em",{parentName:"p"},"comma separated values")," file which seems to be a list of movies. This file is actually a list of the top 100 films on 'Rotten Tomatoes' at the time of writing, with the score, tomato meter, name and number of votes. We'll use it a lot in this chapter to demonstrate text manipulation."),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-n")," flag to specify the number of lines you want to see, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ head -n 3 ~/effective-shell/data/top100.csv\n\n"Rank","Rating","Title","Reviews"\n"1","97","Black Panther (2018)","515"\n"2","94","Avengers: Endgame (2019)","531"\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," command works in the same way - but looks at the ",(0,i.kt)("em",{parentName:"p"},"end")," of a file. This is more useful when you are looking content which changes over time, like log files. In this case you probably want to see only the most ",(0,i.kt)("em",{parentName:"p"},"recent")," entries."),(0,i.kt)("p",null,"Here's how we can see the ten most recent commands we entered in our shell:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail $HISTFILE\n\n: 1606818280:0;ls\n: 1606818300:0;ln -s $(pwd) ~/effective-shell\n: 1606818308:0;cat ~/effective-shell/data/top100.csv\n: 1606818342:0;head -n 3 ~/effective-shell/data/top100.csv\n: 1606819062:0;head ~/effective-shell/data/top100.csv\n: 1606819647:0;gcd\n: 1606819649:0;git stash\n: 1606819650:0;gcd\n: 1606819662:0;git stash pop\n: 1606819803:0;tail $HISTFILE\n")),(0,i.kt)("admonition",{title:"What is $HISTFILE?",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Most Bash-like shells keep a file called the ",(0,i.kt)("em",{parentName:"p"},"history")," file. This is essentially a record of all of the commands which have been written in the shell. The ",(0,i.kt)("inlineCode",{parentName:"p"},"history")," command can be used to show the contents of this file. But if we want to work with the file directly, we can find its location with the special variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"$HISTFILE"),". "),(0,i.kt)("p",{parentName:"admonition"},"Enter ",(0,i.kt)("inlineCode",{parentName:"p"},"help history")," for more information on the shell history.")),(0,i.kt)("p",null,"We can be more specific, just like with ",(0,i.kt)("inlineCode",{parentName:"p"},"head"),", by specifying the number of lines to show:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail -n 3 $HISTFILE\n\n: 1606819650:0;gcd\n: 1606819662:0;git stash pop\n: 1606819803:0;tail $HISTFILE\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tail")," can also be used to show the ",(0,i.kt)("em",{parentName:"p"},"changes")," to a file in real time. Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"-f")," flag to ",(0,i.kt)("em",{parentName:"p"},"follow")," the contents of the file - this means the ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," command show each new line as it gets added to the file."),(0,i.kt)("p",null,"To try it out, run the following command in one shell:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail -f $HISTFILE\n")),(0,i.kt)("p",null,"In another terminal window, start entering commands. You'll see that the ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," command in the first window is writing the updates to the terminal as they are entered in the file. Press ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl+C")," to close the ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," program."),(0,i.kt)("p",null,"Another trick I use a lot with ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"-n +2"),". This shows everything ",(0,i.kt)("em",{parentName:"p"},"from the second line")," - the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," symbol indicates we show everything from the given line onwards. This makes it easy to strip the header, or first line, from content. Here's how you might use it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ head ~/effective-shell/data/top100.csv | tail -n +2\n\n"1","97","Black Panther (2018)","515"\n"2","94","Avengers: Endgame (2019)","531"\n"3","93","Us (2019)","536"\n"4","97","Toy Story 4 (2019)","445"\n"5","99","Lady Bird (2017)","393"\n"6","100","Citizen Kane (1941)","94"\n"7","97","Mission: Impossible - Fallout (2018)","430"\n"8","98","The Wizard of Oz (1939)","120"\n"9","96","The Irishman (2019)","441"\n')),(0,i.kt)("p",null,"Here I've taken the ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," of the file (otherwise the output gets quite difficult to follow), then piped the results into ",(0,i.kt)("inlineCode",{parentName:"p"},"tail -n +2")," to grab everything from the second line onwards - which removes the heading line. We see the films only, not the titles of each column."),(0,i.kt)("p",null,"We're going to use ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tail")," quite a lot when working with text. These are two crucial tools which can really speed up your work."),(0,i.kt)("h2",{id:"replacing-text"},"Replacing Text"),(0,i.kt)("p",null,"The next tool we'll look at is ",(0,i.kt)("inlineCode",{parentName:"p"},"tr")," (",(0,i.kt)("em",{parentName:"p"},"translate characters"),"). This program is very simple. My most common use for ",(0,i.kt)("inlineCode",{parentName:"p"},"tr")," is to perform a simple substitution of characters."),(0,i.kt)("p",null,"Let's create a list of each of the columns in the data file we saw before to show how the command works:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ head -n 1 ~/effective-shell/data/top100.csv | tr \',\' \'\\n\'\n\n"Rank"\n"Rating"\n"Title"\n"Reviews"\n')),(0,i.kt)("p",null,"What about if we wanted to remove the quotes?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ head -n 1 ~/effective-shell/data/top100.csv | tr ',' '\\n' | tr -d '\"'\n\nRank\nRating\nTitle\nReviews\n")),(0,i.kt)("p",null,"Here we've seen two variations on how we can run the command. The first form is used to ",(0,i.kt)("em",{parentName:"p"},"replace")," characters. Running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tr ',' '\\n'\n")),(0,i.kt)("p",null,"Replaces the first specified character with the second. The ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," character is the special ",(0,i.kt)("em",{parentName:"p"},"newline")," character, which is used to create a line break at the end of a file."),(0,i.kt)("p",null,"The second form uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"-d")," flag to specify a set of characters to delete:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tr -d '\"'\n")),(0,i.kt)("p",null,"In the form above we delete quote (",(0,i.kt)("inlineCode",{parentName:"p"},'"'),") characters."),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"tr")," remember that it works on ",(0,i.kt)("em",{parentName:"p"},"characters"),". For example, the following might not work as you expect:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ echo \"Welcome to the shell\" | tr 'shell' 'machine'\n\nWcicomc to tac macii\n")),(0,i.kt)("p",null,"The reason the output is like this is that we're specifying ",(0,i.kt)("em",{parentName:"p"},"character")," replacements - so we're changing characters as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"s -> m\nh -> a\ne -> c\nl -> h\nl -> i\n")),(0,i.kt)("p",null,"There ",(0,i.kt)("em",{parentName:"p"},"are")," plenty of ways to replace entire words or perform more complex operations, but we'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"sed")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"awk")," for these operations - which we'll see in the following chapter."),(0,i.kt)("p",null,"There is one final thing it is worth mentioning about ",(0,i.kt)("inlineCode",{parentName:"p"},"tr"),". It can be provided with ",(0,i.kt)("em",{parentName:"p"},"character classes"),". This is easiest to explain with an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ echo \"Use your inside voice...\" | tr '[[:lower:]]' '[[:upper:]]'\n\nUSE YOUR INSIDE VOICE...\n")),(0,i.kt)("p",null,"In this case we are transforming characters in the ",(0,i.kt)("inlineCode",{parentName:"p"},"lower")," class (lowercase characters) to the ",(0,i.kt)("inlineCode",{parentName:"p"},"upper")," class (uppercase characters)."),(0,i.kt)("p",null,"On Linux systems you can find more about character classes with ",(0,i.kt)("inlineCode",{parentName:"p"},"man 7 regex"),". I am not going to go deeper into character classes at this stage. They provide a simple way to specify things like digits, alphabetic characters and so on, but there are other ways to do this (with ",(0,i.kt)("em",{parentName:"p"},"extended regexes"),") which I think are likely to be more useful to learn about instead."),(0,i.kt)("h2",{id:"how-to-cut"},"How to Cut"),(0,i.kt)("p",null,"The next command is one which I've used far more than I expected. The ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," command ",(0,i.kt)("em",{parentName:"p"},"splits")," a line of text, using a given delimiter. Let's see some examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cut -d\',\' -f 3 ~/effective-shell/data/top100.csv | head\n\n"Title"\n"Black Panther (2018)"\n"Avengers: Endgame (2019)"\n"Us (2019)"\n"Toy Story 4 (2019)"\n"Lady Bird (2017)"\n"Citizen Kane (1941)"\n"Mission: Impossible - Fallout (2018)"\n"The Wizard of Oz (1939)"\n"The Irishman (2019)"\n')),(0,i.kt)("p",null,"This is the first way to use ",(0,i.kt)("inlineCode",{parentName:"p"},"cut"),". We specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"-d")," flag to choose a ",(0,i.kt)("em",{parentName:"p"},"delimiter")," which we will cut the text with, then ",(0,i.kt)("inlineCode",{parentName:"p"},"-f")," to choose ",(0,i.kt)("em",{parentName:"p"},"which field")," we want to see. In this case we show split on the command character and show the third field - the ",(0,i.kt)("em",{parentName:"p"},"title")," of the film in the data file."),(0,i.kt)("p",null,"This can be extraordinarily useful. Let's see how to get the names of the Kubernetes pods I have running on a cluster. I can use the following command to get the pods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ kubectl get pods\n\nNAME                                  READY   STATUS    RESTARTS   AGE\nelastic-operator-0                    1/1     Running   0          35d\nelk-apm-server-65b698fb8c-rzncz       1/1     Running   0          13d\nelk-es-default-0                      1/1     Running   0          35d\nelk-kb-6f8bb6457b-bbbnn               1/1     Running   0          35d\nfilebeat-beat-filebeat-ccgl7          1/1     Running   1          13d\nfilebeat-beat-filebeat-dvf2l          1/1     Running   2          13d\nfilebeat-beat-filebeat-mnpms          1/1     Running   329        13d\nkube-state-metrics-5cb57bdc45-mqv9d   1/1     Running   0          35d\nmetricbeat-beat-metricbeat-2xm7t      1/1     Running   6103       35d\nmetricbeat-beat-metricbeat-96dkt      1/1     Running   6097       35d\nmetricbeat-beat-metricbeat-n7kxm      1/1     Running   6109       35d\n")),(0,i.kt)("p",null,"Now to get the name I can just ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," the lines on the 'space' character and grab the first field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ kubectl get pods | cut -d' ' -f 1\n\nNAME\nelastic-operator-0\nelk-apm-server-65b698fb8c-rzncz\nelk-es-default-0\nelk-kb-6f8bb6457b-bbbnn\nfilebeat-beat-filebeat-ccgl7\nfilebeat-beat-filebeat-dvf2l\nfilebeat-beat-filebeat-mnpms\nkube-state-metrics-5cb57bdc45-mqv9d\nmetricbeat-beat-metricbeat-2xm7t\nmetricbeat-beat-metricbeat-96dkt\nmetricbeat-beat-metricbeat-n7kxm\n")),(0,i.kt)("p",null,"And if we want to strip the first line? We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"tail -n +2")," command to tail everything from the second line onwards:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ kubectl get pods | cut -d' ' -f 1 | tail -n +2\n\nelastic-operator-0\nelk-apm-server-65b698fb8c-rzncz\nelk-es-default-0\nelk-kb-6f8bb6457b-bbbnn\nfilebeat-beat-filebeat-ccgl7\nfilebeat-beat-filebeat-dvf2l\nfilebeat-beat-filebeat-mnpms\nkube-state-metrics-5cb57bdc45-mqv9d\nmetricbeat-beat-metricbeat-2xm7t\nmetricbeat-beat-metricbeat-96dkt\nmetricbeat-beat-metricbeat-n7kxm\n")),(0,i.kt)("p",null,"Bingo - we've removed the heading line. If you remember ",(0,i.kt)("inlineCode",{parentName:"p"},"grep")," from the previous chapter, you might have spotted that we could also just filter the content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ kubectl get pods | cut -d' ' -f 1 | grep -v NAME\n\nelastic-operator-0\nelk-apm-server-65b698fb8c-rzncz\nelk-es-default-0\nelk-kb-6f8bb6457b-bbbnn\nfilebeat-beat-filebeat-ccgl7\nfilebeat-beat-filebeat-dvf2l\nfilebeat-beat-filebeat-mnpms\nkube-state-metrics-5cb57bdc45-mqv9d\nmetricbeat-beat-metricbeat-2xm7t\nmetricbeat-beat-metricbeat-96dkt\nmetricbeat-beat-metricbeat-n7kxm\n")),(0,i.kt)("p",null,"With even just a few simple shell commands there are often many ways to accomplish the same goal!"),(0,i.kt)("p",null,"There is another way we can ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," text. We can ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," by slicing a number of characters from each line."),(0,i.kt)("p",null,"Let's take a look at our web logs file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail ~/effective-shell/logs/web-server-logs.txt\n\n2020-11-29T12:50:52.721Z: info - Request: GET /en.search.min.1f83b222e24a227c0f5763727cb9e4f3b435f08b936f6ce529c9c9359f6b61a8.js\n2020-11-29T12:50:52.722Z: info - Serving file '../../../website/public/en.search.min.1f83b222e24a227c0f5763727cb9e4f3b435f08b936f6ce529c9c9359f6b61a8.js'...\n2020-11-29T12:50:52.762Z: info - Request: GET /svg/menu.svg\n2020-11-29T12:50:52.763Z: info - Serving file '../../../website/public/svg/menu.svg'...\n2020-11-29T12:50:52.763Z: info - Request: GET /svg/calendar.svg\n2020-11-29T12:50:52.764Z: info - Serving file '../../../website/public/svg/calendar.svg'...\n2020-11-29T12:50:52.765Z: info - Request: GET /svg/edit.svg\n2020-11-29T12:50:52.766Z: info - Serving file '../../../website/public/svg/edit.svg'...\n2020-11-29T12:50:52.784Z: info - Request: GET /fonts/roboto-v19-latin-300italic.woff2\n2020-11-29T12:50:52.785Z: info - Serving file '../../../website/public/fonts/roboto-v19-latin-300italic.woff2'...\n")),(0,i.kt)("p",null,"We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-c")," (",(0,i.kt)("em",{parentName:"p"},"characters"),") flag to specify the characters in the line we want to see. Let's extract the timestamp only:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail -n 3 ~/effective-shell/logs/web-server-logs.txt | cut -c 12-19\n\n12:50:52\n12:50:52\n12:50:52\n")),(0,i.kt)("p",null,"We can also use the character option to extract everything from a specific point onwards:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ tail -n 3 ~/effective-shell/logs/web-server-logs.txt | cut -c 27-\n\ninfo - Serving file '../../../website/public/svg/edit.svg'...\ninfo - Request: GET /fonts/roboto-v19-latin-300italic.woff2\ninfo - Serving file '../../../website/public/fonts/roboto-v19-latin-300italic.woff2'...\n")),(0,i.kt)("p",null,"By cutting from the 27th character onwards (",(0,i.kt)("inlineCode",{parentName:"p"},"-c 27-"),") we remove the timestamp and just get the log message."),(0,i.kt)("p",null,"As a nice trick you can use the same syntax when splitting by fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ tail -n 3 ~/effective-shell/data/top100.csv | cut -d\',\' -f 3-\n\n"Pinocchio (1940)","55"\n"Chinatown (1974)","75"\n"The Dark Knight (2008)","342"\n')),(0,i.kt)("p",null,"This is field three onwards. If we just want fields two and three, we use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ tail -n 3 ~/effective-shell/data/top100.csv | cut -d\',\' -f 2,3\n\n"100","Pinocchio (1940)"\n"99","Chinatown (1974)"\n"94","The Dark Knight (2008)"\n')),(0,i.kt)("p",null,"There's a surprising amount you can do with the ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," tool. As we introduce more complex tools later on, like ",(0,i.kt)("inlineCode",{parentName:"p"},"sed")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"awk"),", we'll see other ways to accomplish the same goals, but I often find that by filtering down the content with ",(0,i.kt)("inlineCode",{parentName:"p"},"grep")," first I can ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," my way to what I need without having to use more complex tools."),(0,i.kt)("h2",{id:"a-trick-with-rev"},"A Trick with Rev"),(0,i.kt)("p",null,"There is a very simple command called ",(0,i.kt)("inlineCode",{parentName:"p"},"rev")," which reverses the given input. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ echo "A nut for a jar of tuna" | rev\n\nanut fo raj a rof tun A\n')),(0,i.kt)("p",null,"At first glance this doesn't seem very useful - but there's a nice trick we can do with this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ pwd | rev | cut -d'/' -f 1 | rev\n\neffective-shell\n")),(0,i.kt)("p",null,"Here we take the current working directory, reverse it, cut the first field, then reverse it again. Here's what's happening at each stage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pwd              /Users/dwmkerr/effective-shell\nrev              llehs-evitceffe/rrekmwd/sresU/\ncut -d'/' -f 1   llehs-evitceffe\nrev              effective-shell\n")),(0,i.kt)("p",null,"This is a neat trick to rip all of the text from the ",(0,i.kt)("em",{parentName:"p"},"final")," occurrence of a character. You might not use it very often but it's an interesting reminder that you can often do more than you think by chaining together simple commands into a pipeline!"),(0,i.kt)("h2",{id:"sort-and-unique"},"Sort and Unique"),(0,i.kt)("p",null,"Two other commands which can be really helpful are ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"uniq"),". Let's see ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," first:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cut -d\',\' -f 3 ~/effective-shell/data/top100.csv | sort | head\n\n"12 Years a Slave (2013)"\n"A Hard Day\'s Night (1964)"\n"A Night at the Opera (1935)"\n"A Quiet Place (2018)"\n"A Star Is Born (2018)"\n"Alien (1979)"\n"All About Eve (1950)"\n"Argo (2012)"\n"Arrival (2016)"\n"Avengers: Endgame (2019)"\n')),(0,i.kt)("p",null,"Here we've grabbed the third field in our data file (the name of the film), sorted, then shown the first ten values."),(0,i.kt)("p",null,"You can ",(0,i.kt)("em",{parentName:"p"},"reverse")," the direction of ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-r")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cut -d\',\' -f 3 ~/effective-shell/data/top100.csv | sort -r | head\n\n"Zootopia (2016)"\n"Wonder Woman (2017)"\n"Won\'t You Be My Neighbor? (2018)"\n"Widows (2018)"\n"War for the Planet of the Apes (2017)"\n"Us (2019)"\n"Up (2009)"\n"Toy Story 4 (2019)"\n"Toy Story 3 (2010)"\n"Toy Story 2 (1999)"\n')),(0,i.kt)("p",null,"There are actually quite a few other options for sort, you can see them with ",(0,i.kt)("inlineCode",{parentName:"p"},"man sort"),". However, most of them perform functionality which you can get from other tools (such as making the lines unique, which we can do with ",(0,i.kt)("inlineCode",{parentName:"p"},"uniq"),"). You might find some of them useful so don't be shy to explore some of the other options."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"uniq")," command removes duplicate lines from a stream of text. Note that this ",(0,i.kt)("em",{parentName:"p"},"only")," removes duplicate lines when they are ",(0,i.kt)("em",{parentName:"p"},"next to each other"),". This means that you will often have to ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," first."),(0,i.kt)("p",null,"Here's an example of where I might use ",(0,i.kt)("inlineCode",{parentName:"p"},"uniq")," - getting all unique error messages in a log file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ cut -c 27- ~/effective-shell/logs/web-server-logs.txt | grep error | sort | uniq\n\nerror - Unhandled error EACCES trying to read '../../../website/public/docs/part-1-transitioning-to-the-shell/5-getting-help/index.html', returning a 500\nerror - Unhandled error EACCES trying to read '../../../website/public/svg/calendar.svg', returning a 500\nerror - Unhandled error EACCES trying to read '../../../website/public/svg/edit.svg', returning a 500\ninfo - Request: GET /docs/1-getting-started/images/ls-applications-windows-error.png\ninfo - Request: GET /docs/part-1-transitioning-to-the-shell/3-managing-your-files/images/rm-error-directory.png\ninfo - Serving file '../../../website/public/docs/1-getting-started/images/ls-applications-windows-error.png'...\ninfo - Serving file '../../../website/public/docs/part-1-transitioning-to-the-shell/3-managing-your-files/images/rm-error-directory.png'...\n")),(0,i.kt)("p",null,"Let's break this down:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cut -c 27- ~/effective-shell/logs/web-server-logs.txt")," - extract log messages from a log file, skipping the timestamp"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"grep error")," - filter down to lines which contain the text ",(0,i.kt)("inlineCode",{parentName:"li"},"error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sort")," - sort the output"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uniq")," - show only unique values")),(0,i.kt)("p",null,"This is a powerful technique - if we had thousands of errors in the file, this would make sure we only see ",(0,i.kt)("em",{parentName:"p"},"distinct")," errors, rather than showing ",(0,i.kt)("em",{parentName:"p"},"every")," error."),(0,i.kt)("h2",{id:"dont-forget-your-pager"},"Don't Forget Your Pager!"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"/part-1-transitioning-to-the-shell/getting-help/"},"Chapter 5 - Getting Help")," we talked about the ",(0,i.kt)("em",{parentName:"p"},"pager")," - the program your shell uses to make it easier to look through larger text files, giving the option to move backwards and forwards a page at a time (or searching and so on). Don't forget to use your pager when you are working with text. When you are trying to build a pipeline and want to see intermediate results (perhaps ",(0,i.kt)("em",{parentName:"p"},"before")," you use ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"tail"),") then you can use the pager to avoid filling your screen and terminal with too much text."),(0,i.kt)("p",null,"For example, when looking at the sorted list of films, I might run this:"),(0,i.kt)("pre",null,"$ cut -d',' -f 3 ~/effective-shell/data/top100.csv | sort | less \"",(0,i.kt)("strong",null,"Jaws"),' (1975)" "King Kong (1933)" "La Grande illusion (Grand Illusion) (1938)" "La La Land (2016)" "Lady Bird (2017)" "Laura (1944)" /',(0,i.kt)("strong",null,"Jaws")),(0,i.kt)("p",null,"I've made the output smaller so that it is easier to see what is happening. In this example I've cut out the film name from my data file, sorted it, then piped the result into ",(0,i.kt)("inlineCode",{parentName:"p"},"less")," so that I can page through the data and ensure it is correct - I've also searched for the text ",(0,i.kt)("inlineCode",{parentName:"p"},"Jaws")," to see where it is in the file."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In this chapter we introduced a number of basic tools which let us work with text."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"head")," will show the first ten lines of a file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"head -n 30")," will show the first thirty lines of a file, using the ",(0,i.kt)("inlineCode",{parentName:"li"},"-n")," flag to specify the number of lines."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tail")," will show the final ten lines of a file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tail -n 3")," uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"-n")," flag to specify three lines only."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"$HISTFILE")," environment variable holds the path to the shell command history file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tail -f $HISTFILE")," uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"-f")," flag to ",(0,i.kt)("em",{parentName:"li"},"follow")," the file, printing output as it is written to the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tr 'a' 'b'")," is the ",(0,i.kt)("em",{parentName:"li"},"translate text")," command, which turns one set of characters into another"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tr -d '!'")," shows how the ",(0,i.kt)("inlineCode",{parentName:"li"},"-d")," or ",(0,i.kt)("em",{parentName:"li"},"delete")," flag can specify characters to delete."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"cut")," command can be used to extract parts of a line of text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cut -d',' -f 3")," shows how the ",(0,i.kt)("inlineCode",{parentName:"li"},"-d")," or ",(0,i.kt)("em",{parentName:"li"},"delimiter")," flag is used to specify the delimiter to cut on and how the ",(0,i.kt)("inlineCode",{parentName:"li"},"-f")," or ",(0,i.kt)("em",{parentName:"li"},"field")," flag specifies which of the fields the text has been cut into is printed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cut -c 2-4")," uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"-c")," or ",(0,i.kt)("em",{parentName:"li"},"characters")," flag to specify that we are extracting a subset of characters in the line, in this case characters two to four."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cut -c 10-")," cuts from character ten to the end of the line"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"cut")," command also allows for multiple fields to be specified when cutting by field, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"-f 2,3")," for the second and third field, or ",(0,i.kt)("inlineCode",{parentName:"li"},"-f 4-")," for fields four onwards."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rev")," reverses text - by reversing, cutting and then re-reversing you can quickly extract text from the ",(0,i.kt)("em",{parentName:"li"},"end")," of a line."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sort")," sorts the incoming text alphabetically."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"-r")," flag for ",(0,i.kt)("inlineCode",{parentName:"li"},"sort")," reverses the sort order."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"uniq")," command removes duplicate lines - but only when they are next to each other, so you'll often use it in combination with ",(0,i.kt)("inlineCode",{parentName:"li"},"sort"),"."),(0,i.kt)("li",{parentName:"ul"},"Your pager, for example the ",(0,i.kt)("inlineCode",{parentName:"li"},"less")," program can be useful when inspecting the output of your text transformation commands.")))}h.isMDXComponent=!0}}]);