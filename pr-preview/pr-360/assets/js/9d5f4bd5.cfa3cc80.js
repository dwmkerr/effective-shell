"use strict";(self.webpackChunkeffective_shell=self.webpackChunkeffective_shell||[]).push([[7664],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var r=n.createContext({}),m=function(e){var t=n.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(r.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=m(a),c=l,d=h["".concat(r,".").concat(c)]||h[c]||u[c]||i;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s[h]="string"==typeof e?e:l,o[1]=s;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},945:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var n=a(7462),l=(a(7294),a(3905));const i={title:"Understanding Commands",slug:"/part-2-core-skills/understanding-commands"},o=void 0,s={unversionedId:"core-skills/understanding-commands/index",id:"core-skills/understanding-commands/index",title:"Understanding Commands",description:"In this chapter, we'll take a look at the various different types of shell commands that exist and how this can affect your work. Commands are far more subtle than you might think and in this chapter we'll look at some of the nuances of commands and the practical consequences for your work.",source:"@site/docs/02-core-skills/10-understanding-commands/index.md",sourceDirName:"02-core-skills/10-understanding-commands",slug:"/part-2-core-skills/understanding-commands",permalink:"/part-2-core-skills/understanding-commands",draft:!1,editUrl:"https://github.com/dwmkerr/effective-shell/edit/main/docs/02-core-skills/10-understanding-commands/index.md",tags:[],version:"current",frontMatter:{title:"Understanding Commands",slug:"/part-2-core-skills/understanding-commands"},sidebar:"sidebar",previous:{title:"Job Control",permalink:"/part-2-core-skills/job-control"},next:{title:"Finding Files",permalink:"/part-2-core-skills/finding-files"}},r={},m=[{value:"What Are Commands?",id:"what-are-commands",level:2},{value:"The Different Types of Commands",id:"the-different-types-of-commands",level:2},{value:"Executables - Programs",id:"executables---programs",level:3},{value:"Executables - Scripts",id:"executables---scripts",level:3},{value:"Builtins",id:"builtins",level:3},{value:"Functions",id:"functions",level:3},{value:"Aliases",id:"aliases",level:3},{value:"The Key Takeaways",id:"the-key-takeaways",level:2},{value:"More than You Need to Know",id:"more-than-you-need-to-know",level:2},{value:"<code>what</code>",id:"what",level:3},{value:"<code>whatis</code>",id:"whatis",level:3},{value:"<code>which</code>",id:"which",level:3},{value:"<code>whence</code>",id:"whence",level:2},{value:"<code>where</code>",id:"where",level:3},{value:"<code>whereis</code>",id:"whereis",level:3},{value:"<code>command</code>",id:"command",level:3},{value:"<code>type</code>",id:"type",level:3},{value:"Summary",id:"summary",level:2}],p={toc:m};function h(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In this chapter, we'll take a look at the various different types of shell commands that exist and how this can affect your work. Commands are far more subtle than you might think and in this chapter we'll look at some of the nuances of commands and the practical consequences for your work."),(0,l.kt)("p",null,"By the end of this chapter, you might even be able to make sense of the horrifying and perfectly syntactically valid code below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"which $(where $(what $(whence $(whereis who))))\n")),(0,l.kt)("h2",{id:"what-are-commands"},"What Are Commands?"),(0,l.kt)("p",null,"This is ",(0,l.kt)("em",{parentName:"p"},"really")," important to understand! A ",(0,l.kt)("em",{parentName:"p"},"command")," in a shell is something you execute. It might take parameters. Generally it'll have a form like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"command param1 param2\n")),(0,l.kt)("p",null,"We've already seen many commands during this series:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ls              # Show the contents of the current directory\ncd ~            # Move to the user's home\ncat file.txt    # Output the contents of 'file.txt' to stdout\n")),(0,l.kt)("p",null,"But to be an effective shell user, you must understand that not all commands are created equal. The differences between the types of commands will affect how you use them."),(0,l.kt)("h2",{id:"the-different-types-of-commands"},"The Different Types of Commands"),(0,l.kt)("p",null,"There are ",(0,l.kt)("em",{parentName:"p"},"four")," types of commands in most shells:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Executables"),(0,l.kt)("li",{parentName:"ol"},'"Built-Ins" (which we\'ll just call ',(0,l.kt)("em",{parentName:"li"},"builtins")," from now on)"),(0,l.kt)("li",{parentName:"ol"},"Functions"),(0,l.kt)("li",{parentName:"ol"},"Aliases")),(0,l.kt)("p",null,"Each is different and has its own quirks. Let's quickly dig in and see a bit more."),(0,l.kt)("h3",{id:"executables---programs"},"Executables - Programs"),(0,l.kt)("p",null,"Executables are just files with the 'executable' bit set",(0,l.kt)("sup",{parentName:"p",id:"fnref-1"},(0,l.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),". If I execute the ",(0,l.kt)("inlineCode",{parentName:"p"},"cat")," command, the shell will search for an executable named ",(0,l.kt)("inlineCode",{parentName:"p"},"cat")," in my ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),". If it finds it, it will run the program."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ cat file.txt\nThis is a simple text file\n")),(0,l.kt)("p",null,"What is ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),"? ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH")," is the standard environment variable used to define ",(0,l.kt)("em",{parentName:"p"},"where")," the shell should search for programs. If we temporarily ",(0,l.kt)("em",{parentName:"p"},"empty")," this variable, the shell won't find the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ PATH="" cat file.txt\nbash: cat: No such file or directory\n')),(0,l.kt)("p",null,"Normally your ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH")," variable will include the standard locations for Linux programs - folders such as ",(0,l.kt)("inlineCode",{parentName:"p"},"/bin"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/sbin"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/bin")," and so on",(0,l.kt)("sup",{parentName:"p",id:"fnref-2"},(0,l.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")),"."),(0,l.kt)("p",null,"If you were to print the variable, you'd see a bunch of paths (they are separated by colons; I've put them on separate lines for readability):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"/usr/local/bin\n/usr/bin\n/bin\n/usr/sbin\n/sbin\n")),(0,l.kt)("p",null,"The shell will start with the ",(0,l.kt)("em",{parentName:"p"},"earlier")," locations and move to the later ones. This allows ",(0,l.kt)("em",{parentName:"p"},"local")," flavours of tools to be installed for users, which will take precedence over ",(0,l.kt)("em",{parentName:"p"},"general")," versions of tools."),(0,l.kt)("p",null,"There will likely be other locations too - you might see Java folders, package manager folders and so on."),(0,l.kt)("h3",{id:"executables---scripts"},"Executables - Scripts"),(0,l.kt)("p",null,"Imagine we create a text file called ",(0,l.kt)("inlineCode",{parentName:"p"},"dog")," in the local folder that looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\necho "\ud83d\udc36 woof \ud83d\udc36"\n')),(0,l.kt)("p",null,"This is a shell script (you've heard this before, but we'll see a ",(0,l.kt)("em",{parentName:"p"},"lot")," more of these as we go through the book!). We mentioned that ",(0,l.kt)("em",{parentName:"p"},"executables")," are any files which have the ",(0,l.kt)("em",{parentName:"p"},"executable")," bit set. Let's actually do this, using the ",(0,l.kt)("inlineCode",{parentName:"p"},"chmod")," (",(0,l.kt)("em",{parentName:"p"},"change file modes"),") command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ ls -l dog\n-rw-r--r-- 1 dwmkerr staff 32 Oct  8 22:44 dog\n$ chmod +x dog\n$ ls -l dog\n-rwxr-xr-x 1 dwmkerr staff 32 Oct  8 22:44 dog\n")),(0,l.kt)("p",null,"I've used ",(0,l.kt)("inlineCode",{parentName:"p"},"ls -l dog")," to show the file permissions of ",(0,l.kt)("inlineCode",{parentName:"p"},"dog")," before and after the ",(0,l.kt)("inlineCode",{parentName:"p"},"chmod +x dog"),(0,l.kt)("sup",{parentName:"p",id:"fnref-3"},(0,l.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3"))," command. We can see that there are some new ",(0,l.kt)("inlineCode",{parentName:"p"},"x"),"'s in the first section. These are saying that the file is now ",(0,l.kt)("em",{parentName:"p"},"executable")," by all users."),(0,l.kt)("p",null,"Now that we have made the file executable we can run this just like any other program - as long as we tell the shell to look for programs in the current directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ PATH="." dog\n\ud83d\udc36 woof \ud83d\udc36\n')),(0,l.kt)("p",null,"By the way - don't do this! Adding the special ",(0,l.kt)("inlineCode",{parentName:"p"},".")," directory to the path is generally not a safe or sensible thing to do, this is just a demonstration of how it works. More common would be to run the program by specifying the path to the file, like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ ./dog\n\ud83d\udc36 woof \ud83d\udc36\n")),(0,l.kt)("p",null,"Another option would just be to move it to a standard location that the shell already checks for programs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ mv dog /usr/local/bin\n$ dog\n\ud83d\udc36 woof \ud83d\udc36\n")),(0,l.kt)("p",null,"Executables don't ",(0,l.kt)("em",{parentName:"p"},"have")," to be compiled program code, they can be scripts. If a file starts with ",(0,l.kt)("inlineCode",{parentName:"p"},"#!")," (the 'shebang'), then the system will try to run the contents of the file with the program specified in the shebang."),(0,l.kt)("p",null,"We will look at shebangs in greater detail in a later chapter. But the key takeaway here is that we can also have ",(0,l.kt)("em",{parentName:"p"},"executable scripts")," as commands."),(0,l.kt)("h3",{id:"builtins"},"Builtins"),(0,l.kt)("p",null,"OK, so we've seen executables. What about a command like this?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'local V="hello" echo $V\n')),(0,l.kt)("p",null,"You will not find the ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," executable anywhere on your system. It is a ",(0,l.kt)("em",{parentName:"p"},"builtin")," - a special command built directly into the shell program."),(0,l.kt)("p",null,"Builtins are often highly specific to your shell. They might be used for programming (",(0,l.kt)("inlineCode",{parentName:"p"},"local")," for example is used to declare a locally scoped variable), or they might be for very shell-specific features."),(0,l.kt)("p",null,"This is where we need to take note. As soon as you are running a builtin, you are potentially using a feature that is specific to ",(0,l.kt)("em",{parentName:"p"},"your")," shell, rather than a program that is shared across the system and can be run by ",(0,l.kt)("em",{parentName:"p"},"any")," shell."),(0,l.kt)("p",null,"Trying to programmatically execute ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," as a process will fail - there is no executable with that name; it is purely a shell construct."),(0,l.kt)("p",null,"So how do we know if a command is a builtin? The preferred method is to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ type local\nlocal is a shell builtin\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," command (which is ",(0,l.kt)("em",{parentName:"p"},"itself")," a builtin!) can tell you the exact type of shell command."),(0,l.kt)("p",null,"Interestingly, you might be using more builtins than you think. ",(0,l.kt)("inlineCode",{parentName:"p"},"echo")," is a program, but most of the time you are not executing it when you are in a shell:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ type -a echo\necho is a shell builtin\necho is /bin/echo\n")),(0,l.kt)("p",null,"By using the ",(0,l.kt)("inlineCode",{parentName:"p"},"-a")," flag on ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," to show ",(0,l.kt)("em",{parentName:"p"},"all")," commands that match the name, we see that ",(0,l.kt)("inlineCode",{parentName:"p"},"echo")," is actually both a builtin ",(0,l.kt)("em",{parentName:"p"},"and")," a program."),(0,l.kt)("p",null,"Many simple programs have builtin versions. The shell can execute them much faster."),(0,l.kt)("p",null,"Some commands are a builtin so that they can function in a sensible manner. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"cd")," command changes the current directory - if we executed it as a process, it would change only the directory for the ",(0,l.kt)("inlineCode",{parentName:"p"},"cd")," process itself, not the shell, making it much less useful."),(0,l.kt)("p",null,"Echo is builtin because the shell can run much more quickly by not actually running a program if it has its own built in implementation."),(0,l.kt)("p",null,"Builtins will vary from shell to shell, but many shells are 'Bash-like' - meaning they will have a set very similar to the Bash builtins, which you can see here:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html"},"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html")),(0,l.kt)("p",null,"As should be familiar from ",(0,l.kt)("a",{parentName:"p",href:"/part-1-transitioning-to-the-shell/getting-help/"},"Chapter 5 - Getting Help"),", you can get help for builtins:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ man source     # source is a builtin\nBUILTIN(1)                BSD General Commands Manual               BUILTIN(1)\n\nNAME\n     builtin, !, %, # ...snip...\n\nSYNOPSIS\n     builtin [-options] [args ...]\n")),(0,l.kt)("p",null,"However, the manual will ",(0,l.kt)("em",{parentName:"p"},"not")," show information on specific builtins, which is a pain. Your shell ",(0,l.kt)("em",{parentName:"p"},"might")," have an option to show more details - for example, in Bash you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"help"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ help source\nsource: source filename [arguments]\n    Read and execute commands from FILENAME and return.  The pathnames\n    in $PATH are used to find the directory containing FILENAME.  If any\n    ARGUMENTS are supplied, they become the positional parameters when\n    FILENAME is executed.\n")),(0,l.kt)("p",null,"But remember: ",(0,l.kt)("inlineCode",{parentName:"p"},"help")," is a builtin; you might not find it in all shells (you won't find it in ",(0,l.kt)("inlineCode",{parentName:"p"},"zsh"),", for example). This highlights again the challenges of builtins."),(0,l.kt)("h3",{id:"functions"},"Functions"),(0,l.kt)("p",null,"You can define your own shell functions. We will see a lot more of this later, but let's show a quick example for now:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ restart-shell () { exec -l $SHELL }\n")),(0,l.kt)("p",null,"This snippet creates a function that restarts the shell (quite useful if you are messing with shell configuration files or think you might have irreversibly goofed up your current session)."),(0,l.kt)("p",null,"We can execute this function just like any command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ restart-shell\n")),(0,l.kt)("p",null,"And running ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," will show us that this is a function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ type restart-shell\nrestart-shell is a function\nrestart-shell ()\n{\n    exec -l $SHELL\n}\n")),(0,l.kt)("p",null,"Functions are one of the most powerful shell constructs we will see; they are extremely useful for building sophisticated logic. We're going to see them in a lot more detail later, but for now it is enough to know that they exist, and can run logic, and are run as commands."),(0,l.kt)("h3",{id:"aliases"},"Aliases"),(0,l.kt)("p",null,"An alias is just a shortcut. Type in a certain set of characters, and the shell will replace them with the value defined in the alias."),(0,l.kt)("p",null,"Some common commands are actually already aliases - for example, in my ",(0,l.kt)("inlineCode",{parentName:"p"},"zsh")," shell, the ",(0,l.kt)("inlineCode",{parentName:"p"},"ls")," command is an alias:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% type -a ls\nls is an alias for ls -G\nls is /bin/ls\n")),(0,l.kt)("p",null,"I make sure that when I use the ",(0,l.kt)("inlineCode",{parentName:"p"},"ls")," command, the shell always expands it to ",(0,l.kt)("inlineCode",{parentName:"p"},"ls -G"),", which colours the output."),(0,l.kt)("p",null,"We can quickly define aliases to save on keystrokes. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ alias k='kubectl'\n")),(0,l.kt)("p",null,"From this point on, I can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," alias as shorthand for the ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl")," command."),(0,l.kt)("p",null,"Aliases are far less sophisticated than functions. Think of them as keystroke savers and nothing more, and you won't go far wrong."),(0,l.kt)("h2",{id:"the-key-takeaways"},"The Key Takeaways"),(0,l.kt)("p",null,"So we now hopefully have a greater understanding of the variety of shell commands. Not all commands are executables, not all of the commands we ",(0,l.kt)("em",{parentName:"p"},"think")," are executables necessarily are, and some commands might be more sophisticated."),(0,l.kt)("p",null,"As a shell user, the key things to remember are:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Executables are programs your system can use; your shell just calls out to them."),(0,l.kt)("li",{parentName:"ol"},"Builtins are ",(0,l.kt)("em",{parentName:"li"},"very")," shell-specific and usually control the shell itself"),(0,l.kt)("li",{parentName:"ol"},"Functions are powerful ways to write logic but will normally be shell-specific."),(0,l.kt)("li",{parentName:"ol"},"Aliases are conveniences for human operators, but only in the context of an interactive shell.")),(0,l.kt)("p",null,"To find out how a command is implemented, just use the ",(0,l.kt)("inlineCode",{parentName:"p"},"type -a")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ type -a cat\ncat is /bin/cat\n")),(0,l.kt)("h2",{id:"more-than-you-need-to-know"},"More than You Need to Know"),(0,l.kt)("p",null,"OK, for the masochistic few, you might be wondering about all of the other commands and utilities you may have seen that can tell you about programs and commands:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"what")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whatis")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"which")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whence")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"where")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whereis")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"command")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type"))),(0,l.kt)("p",null,"A ",(0,l.kt)("em",{parentName:"p"},"lot")," of these are legacy and should be avoided, but for completeness sake, we'll go through them."),(0,l.kt)("h3",{id:"what"},(0,l.kt)("inlineCode",{parentName:"h3"},"what")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"what")," reads out special metadata embedded in a program, generally used to identify the version of source code it was built from:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ what /bin/ls\n/bin/ls\n         Copyright (c) 1989, 1993, 1994\n        PROGRAM:ls  PROJECT:file_cmds-272.220.1\n")),(0,l.kt)("p",null,"There should be almost no circumstance in which you need to use it in your day-to-day work, but you might come across it if you ",(0,l.kt)("em",{parentName:"p"},"meant")," to type ",(0,l.kt)("inlineCode",{parentName:"p"},"whatis"),"."),(0,l.kt)("h3",{id:"whatis"},(0,l.kt)("inlineCode",{parentName:"h3"},"whatis")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"whatis")," searches a local help database for text. This can be useful in tracking down manual pages:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ whatis bash\nbash(1)                  - GNU Bourne-Again SHell\nbashbug(1)               - report a bug in bash\n")),(0,l.kt)("p",null,"But I can't imagine it will be a regularly used tool by most users."),(0,l.kt)("h3",{id:"which"},(0,l.kt)("inlineCode",{parentName:"h3"},"which")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"which")," will search your ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH")," to see whether an executable can be found. With the ",(0,l.kt)("inlineCode",{parentName:"p"},"-a")," flag, it will show all results."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ which -a vi\n/usr/local/bin/vi\n/usr/bin/vi\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"which")," originated in ",(0,l.kt)("inlineCode",{parentName:"p"},"csh"),". It remains on many systems for compatibility but in general should be avoided due to potentially odd behaviour",(0,l.kt)("sup",{parentName:"p",id:"fnref-4"},(0,l.kt)("a",{parentName:"sup",href:"#fn-4",className:"footnote-ref"},"4")),"."),(0,l.kt)("h2",{id:"whence"},(0,l.kt)("inlineCode",{parentName:"h2"},"whence")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"whence")," was added to the Korn shell. You are unlikely to use it unless you are on systems using ",(0,l.kt)("inlineCode",{parentName:"p"},"ksh"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"zsh")," also has this command, but it should be avoided and considered non-standard."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% whence brew\n/usr/local/bin/brew\n")),(0,l.kt)("h3",{id:"where"},(0,l.kt)("inlineCode",{parentName:"h3"},"where")),(0,l.kt)("p",null,"This is a shell builtin that can provide information on commands, similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% where ls\nls: aliased to ls -G\n/bin/ls\n")),(0,l.kt)("p",null,"However, ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," should be preferred, as it is more standard."),(0,l.kt)("h3",{id:"whereis"},(0,l.kt)("inlineCode",{parentName:"h3"},"whereis")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"whereis")," is available on some systems and generally operates the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"which"),", searching paths for an executable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% whereis ls\n/bin/ls\n")),(0,l.kt)("p",null,"Again, ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," should be preferred for compatibility."),(0,l.kt)("h3",{id:"command"},(0,l.kt)("inlineCode",{parentName:"h3"},"command")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"command")," is defined in the POSIX standard, so should be expected to be present on most modern systems. Without arguments, it simply executes a command. With the ",(0,l.kt)("inlineCode",{parentName:"p"},"-v")," argument, you get a fairly machine-readable or processable response; with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-V")," argument, you get a more human readable response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% command -v ls\nalias ls='ls -G'\n% command -V ls\nls is an alias for ls -G\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"command")," can be useful in scripts, as we will see in later chapters."),(0,l.kt)("h3",{id:"type"},(0,l.kt)("inlineCode",{parentName:"h3"},"type")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"type")," is part of the Unix standard and will be present in most modern systems. As we've already seen, it will identify the type of command as well as the location for an executable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% type -a ls\nls is an alias for ls -G\nls is /bin/ls\n")),(0,l.kt)("p",null,"This command can also be used to only search for paths:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"% type -p ls\nls is /bin/ls\n")),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"In summary, avoid anything that starts with '",(0,l.kt)("inlineCode",{parentName:"p"},"w"),"'! These are legacy commands, generally needed only when working on older Unix machines. ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"command"),"  should be used instead."),(0,l.kt)("div",{className:"footnotes"},(0,l.kt)("hr",{parentName:"div"}),(0,l.kt)("ol",{parentName:"div"},(0,l.kt)("li",{parentName:"ol",id:"fn-1"},"We will cover permissions and modes in later chapters.",(0,l.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,l.kt)("li",{parentName:"ol",id:"fn-2"},"Why these names and locations? It's a long story. The best place to start if you are interested is the ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"},"Filesystem Hierarchy Standard"),".",(0,l.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,l.kt)("li",{parentName:"ol",id:"fn-3"},(0,l.kt)("inlineCode",{parentName:"li"},"chmod")," changes the mode of a file; ",(0,l.kt)("inlineCode",{parentName:"li"},"+x")," means 'add the executable bit'. This tells the operating system the file can be executed.",(0,l.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")),(0,l.kt)("li",{parentName:"ol",id:"fn-4"},(0,l.kt)("a",{parentName:"li",href:"https://unix.stackexchange.com/questions/85249/why-not-use-which-what-to-use-then"},"Stack Exchange: Why not use \u201cwhich\u201d? What to use then?"),(0,l.kt)("a",{parentName:"li",href:"#fnref-4",className:"footnote-backref"},"\u21a9")))))}h.isMDXComponent=!0}}]);